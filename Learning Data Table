setwd("~/Users/jared/ASD_CSV_FILES")
library(MASS)
library(data.table)
library(readxl)
library(dplyr)

file.list <- list()
list_of_file_names <- c("2016_17_NSCH_Topical_Implicate_CAHMI_DRCv2.csv", "2018-2019_NSCH_Topical_CAHMI_DRCv2.csv")
for(name in list_of_file_names){
    file_path <- file.path("./ASD_CSV_FILES", name)
    file.list[[name]] <-data.table::fread(file_path)
}

#make a data frame of codes and their category
COMORBIDITY <- c("K2Q34A", "K2Q36A", "K2Q60A", "K2Q37A", "K2Q30A", "K2Q31A")
RESIDENCE <- c("LIVEUSA_MO", "K11Q43R")
codes <- c(COMORBIDITY, RESIDENCE)
descriptions <- c("Behavior Problems", "Developmental Delay", "Intellectual Disability",
                  "Speech Disorder", "Learning Disability", "ADD/ADHD",
                  "How Long Living in the United States - Years", "How Many Times Moved to New Address")

code_dictionary <- setNames(descriptions, codes)


categories <- rep(c("COMORBIDITY", "RESIDENCE"), c(length(COMORBIDITY), length(RESIDENCE)))
outputs <- c("K2Q35A", "K2Q35B")

#creating learning.codes table

learning.codes <- data.table()
for(file_name in names(file.list)){
  subset_data <- file.list[[file_name]][, ..codes]
  
  new_data <- data.table(matrix(NA, nrow = nrow(file.list[[file_name]]), ncol = length(codes)))
                         setnames(new_data, codes)
                         
  new_data[, (codes) := subset_data]
  
  learning.codes <- rbindlist(list(learning.codes, new_data), fill = TRUE)
  
}

#add a year column
learning.codes[, Year := ifelse(.I <= 71811, "2016 - 2017", "2018-2019")]

#one-hot columns
one_hotted_data <- copy(learning.codes)
for(col.name in names(one_hotted_data)) {
  
  unique_values <- unique(one_hotted_data[[col.name]])
                          
  for(value in unique_values) {
    
      if(!is.na(value)) {
        
      new.col.name <- paste(col.name, value, sep = "_")
      
      one_hotted_data[, (new.col.name) := as.integer(one_hotted_data[[col.name]] == value)]
      }
  }
}

training.data <- one_hotted_data[,10:53]

#assigning folds

OneFold <- function(data, k, validation_fold) {
  n_rows <- nrow(data)
  rows_per_fold <- ceiling(n_rows / k)
  
  set.seed(123)
  
  data[, Fold := rep(1:k, each = rows_per_fold, replace = TRUE)]
  
  data[, Set := ifelse(Fold == validation_fold, "validation", "train")]
  
  return(data)
}

# Example usage
k <- 3
validation_fold <- 2
folded_data <- OneFold(training.data, k = k, validation_fold = validation_fold)




glm.list <- list()
for{fold in 1:k}{
  fold <- cv.glmnet(folded_data, nfolds = 3)
  




